import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useEffect, useMemo, useState, useCallback } from "react";
import { onEvent } from "../scripts/event";

const Home: NextPage = () => {
  const [account, setAccount] = useState("");
  const [dealerHand, setDealerHand] = useState([]);
  const [playerHand, setPlayerHand] = useState([]);
  const [joinedGame, setJoinedGame] = useState(false);
  const [playingOut, setPlayingOut] = useState(false);
  const [gameOver, setGameOver] = useState(false);
  const [bet, setBet] = useState("");

  const kontour = useMemo(() => {
    if (typeof window !== "undefined") {
      return window && window.kontour;
    }
  }, []);

  const requestUserAccounts = useCallback(async () => {
    const account = await kontour?.requestMetamaskAccounts();
    if (account) {
      setAccount(account);
    }
  }, [kontour]);

  const updateState = useCallback(async () => {
    if (kontour == null) {
      return;
    }
    const dealerHand =
      (await kontour?.contracts.Deal?.view.getDealerHand()) || [];
    setDealerHand(dealerHand);

    const playerHand =
      (await kontour?.contracts.Deal?.view.getPlayerHand()) || [];
    setPlayerHand(playerHand);
    const bettor = await kontour?.contracts?.Bet?.view.bettor();
    console.log(bettor, account);
    const joinedGame =
      (account != null && bettor.toLowerCase() === account.toLowerCase()) ||
      false;

    setJoinedGame(joinedGame);
    const gameOver = (await kontour?.contracts?.Deal?.view.gameOver()) || false;
    setGameOver(gameOver);
  }, [account, kontour]);

  useEffect(() => {
    async function setup() {
      if (kontour == null || kontour.web3 == null) {
        return;
      }
      await requestUserAccounts();
      await updateState();

      const unmountOnEventListeners = await onEvent(
        "CardDealt",
        {
          onEventReceived: async (...args) => {
            console.log("card dealt", args);
            await updateState();
          },
        },
        kontour?.contracts?.Deal.web3Object,
        {}
      );

      const unmountGameOverListeners = await onEvent(
        "GameOver",
        {
          onEventReceived: async ({ returnValues }) => {
            console.log(returnValues);
            const alertMessage = returnValues[2]
              ? `You won! :) \nDealer's score: ${returnValues[1]}, \nYour score: ${returnValues[0]} `
              : `You lost :(. \nDealer's score: ${returnValues[1]}, \nYour score: ${returnValues[0]} `;
            alert();
            await updateState();
          },
        },
        kontour?.contracts?.Deal.web3Object,
        {}
      );

      return () => {
        unmountOnEventListeners();
        unmountGameOverListeners();
      };
      // setup listeners for onCardDealt and onGameOver
    }
    setup();
  }, [
    kontour,
    kontour?.contracts?.Bet?.view,
    kontour?.contracts?.Deal?.view,
    requestUserAccounts,
    updateState,
  ]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Blockjack</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Welcome to Blockjack!</h1>

        <button
          onClick={(e) => {
            requestUserAccounts();
          }}
        >
          {account ? "Connected" : "Connect to Blockchain"}
        </button>

        <div>
          <p className={styles.description}>Dealer's hand:</p>
          <div className={[styles.description, styles.hand].join(" ")}>
            {dealerHand.map((val, idx) => {
              let cardValue = "?";
              if (idx === 0 && joinedGame) {
                cardValue = val;
              } else if (idx === 1 && playingOut) {
                cardValue = val;
              }
              return (
                <div className={styles.card} key={idx}>
                  {cardValue}
                </div>
              );
            })}
          </div>
        </div>

        {joinedGame ? (
          <>
            <div>
              <p className={styles.description}>Your hand:</p>
            </div>
            <div className={[styles.description, styles.hand].join(" ")}>
              {playerHand.map((cardValue, idx) => {
                return (
                  <div className={styles.card} key={idx}>
                    {cardValue}
                  </div>
                );
              })}
            </div>
            <button
              onClick={async () => {
                await kontour?.contracts.Deal.nonpayable.hitMe();
              }}
            >
              Hit me!
            </button>
          </>
        ) : (
          <div>
            <p className={styles.description}>Join game?</p>
            <div
              style={{
                display: "flex",
                alignItems: "center",
                flexDirection: "column",
              }}
            >
              <div>
                <input
                  type="number"
                  value={bet}
                  onChange={(e) => {
                    setBet(e.currentTarget.value);
                  }}
                />{" "}
                <label>ETH</label>
              </div>
              <button
                style={{ marginTop: "24px" }}
                disabled={bet === ""}
                onClick={async (e) => {
                  const wei = kontour?.web3.utils.toBN(
                    kontour?.web3.utils.toWei(bet)
                  );
                  await kontour.contracts.Bet.payable.bet(wei);
                  updateState();
                }}
              >
                Place Bet
              </button>
            </div>
          </div>
        )}
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by&nbsp;<b> Kontour</b>
        </a>
      </footer>
    </div>
  );
};

export default Home;
